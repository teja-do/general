Low Effort Applications:

Simple, straightforward codebase with minimal dependencies
Limited functionality, easy to understand and maintain
No complex integrations or dependencies on other systems
Can be easily updated or refactored by a single developer
No significant technical debt or legacy code
Can be easily replaced or rebuilt if needed
Requires minimal testing and validation
Examples: Simple web applications, small scripts, or basic tools.

Medium Effort Applications:

Moderate complexity, with some dependencies on other systems
Requires some understanding of the codebase and its architecture
May have some technical debt or legacy code, but it's manageable
Can be updated or refactored by a small team of developers
May require some testing and validation, but it's relatively straightforward
May have some integrations with other systems, but they're well-documented
Requires some maintenance and support, but it's manageable by a single team
Examples: Mid-sized web applications, basic APIs, or simple integrations.

High Effort Applications:

Complex, highly customized codebase with many dependencies
Requires deep understanding of the codebase, its architecture, and its integrations
Significant technical debt or legacy code, which requires significant refactoring
Requires a large team of developers to maintain and update
Requires extensive testing and validation, including regression testing
Has many integrations with other systems, which require careful management
Requires significant maintenance and support, including dedicated resources and infrastructure
Examples: Large-scale enterprise applications, complex integrations, or highly customized systems.

Additional considerations:

Code quality: Applications with poor code quality, such as high cyclomatic complexity or low code coverage, may require more effort to maintain or modernize.
Technology stack: Applications built on outdated or proprietary technologies may require more effort to maintain or modernize.
Integration complexity: Applications with many complex integrations may require more effort to maintain or modernize.
Business criticality: Applications that are critical to the business may require more effort to maintain or modernize, as downtime or errors can have significant impact on the organization.
By categorizing your applications based on the effort required to maintain or modernize them, you can prioritize your resources and allocate them more effectively. This can help you:

Focus on the most critical applications first
Allocate resources more efficiently
Reduce the risk of application downtime or errors
Improve the overall quality and maintainability of your applications



-------------------------------------------------------------------------

Low Effort Applications:

Estimated duration: 2-4 weeks
Recommended team size: 1 developer
Tasks:
Conduct code review and refactoring
Update dependencies and libraries
Simplify architecture and address technical debt
Perform testing and validation
Complexity: Low (simple UI, minimal data, straightforward backend)
Volume of Work: Small
Medium Effort Applications:

Estimated duration: 4-8 weeks
Recommended team size: 2 developers
Tasks:
Conduct code review and refactoring
Update dependencies and libraries
Simplify architecture and address technical debt
Integrate with new systems and services
Perform testing and validation
Conduct regression testing
Complexity: Medium (moderate UI, moderate data, moderate backend)
Volume of Work: Moderate
High Effort Applications:

Estimated duration: 8-12 weeks
Recommended team size: 3-4 developers
Tasks:
Conduct code review and refactoring
Update dependencies and libraries
Simplify architecture and address technical debt
Integrate with new systems and services
Perform testing and validation
Conduct regression testing
Address complex integrations and dependencies
Update infrastructure and deployment scripts
Complexity: High (complex UI, high data, complex backend)
Volume of Work: High
This revised estimate takes into account the complexity of the UI, data, and backend infrastructure, as well as the volume of work required for each application. However, please note that this is still a rough estimate, and the actual time required to rebuild the application may vary depending on the specific requirements of each application and the complexity of the migration.
-------------------------------------------------

Low Effort: 5 applications (36%)
AT4
Asequence editor app
Arules-based pipeline schedule viewer app
Aadditional reports
ATFMS tank scheduling app
Medium Effort: 6 applications (43%)
ANASS
AELS
AMaintenance Planning Program
Alegacy corporate pipeline scheduling app
Alegacy field pipeline scheduling app
Alegacy corporate schedule viewer app
High Effort: 3 applications (21%)
Alegacy field schedule viewer app
ATank schedule builder app
Areporting application
